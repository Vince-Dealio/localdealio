// ✅ Full code for prisma/schema.prisma — REPLACE the entire file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * Core user model used by NextAuth + your app.
 */
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?

  hasProfile    Boolean         @default(false)
  isAdmin       Boolean         @default(false)
  createdAt     DateTime        @default(now())

  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  categories    UserCategory[]  // optional legacy link
}

/**
 * Public-facing profile at digi.site/username
 * — keeps denormalized location fields for quick filters & SEO,
 * — and links to a normalized Location record (optional).
 */
model Profile {
  id          String         @id @default(cuid())
  userId      String         @unique
  username    String         @unique
  displayName String?
  bio         String?        @db.Text
  website     String?

  // Denormalized location facets (quick filters + SEO paths)
  country     String?
  region      String?
  city        String?
  latitude    Float?
  longitude   Float?

  // Normalized location reference (optional)
  locationId  String?
  location    Location?      @relation(fields: [locationId], references: [id], onDelete: SetNull)

  isPublished Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  ProfileCategory[]
  tags        ProfileTag[]

  @@index([country, region, city])
  @@index([username])
  @@index([locationId])
}

/**
 * Normalized location entity (MVP).
 * One record per unique Country/Region/City combination (plus lat/lng).
 * You can extend later (ISO codes, parent hierarchy, etc.).
 */
model Location {
  id         String   @id @default(cuid())

  // Human-readable names
  country    String
  region     String?
  city       String?

  // Slugs for SEO / URLs if needed
  countrySlug String
  regionSlug  String?
  citySlug    String?

  latitude   Float?
  longitude  Float?

  createdAt  DateTime @default(now())

  // Backrefs
  profiles   Profile[]

  // Avoid duplicates of the same place (null-safe uniqueness)
  @@unique([countrySlug, regionSlug, citySlug])
  @@index([country, region, city])
}

/**
 * Temporary storage pre-payment
 */
model PendingUser {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String
  createdAt DateTime @default(now())
}

/**
 * Curated taxonomy
 */
model Category {
  id        String           @id @default(cuid())
  name      String           @unique
  slug      String           @unique
  createdAt DateTime         @default(now())

  profiles  ProfileCategory[]
  users     UserCategory[]   // optional legacy link
}

/**
 * Profile <-> Category (many-to-many)
 */
model ProfileCategory {
  id         String   @id @default(cuid())
  profileId  String
  categoryId String

  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([profileId, categoryId])
  @@index([categoryId])
}

/**
 * Optional User <-> Category (can remove later if unused)
 */
model UserCategory {
  id         String   @id @default(cuid())
  userId     String
  categoryId String

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@index([categoryId])
}

/**
 * Free-form keywords
 */
model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  slug      String       @unique
  createdAt DateTime     @default(now())

  profiles  ProfileTag[]
}

/**
 * Profile <-> Tag (many-to-many)
 */
model ProfileTag {
  id        String   @id @default(cuid())
  profileId String
  tagId     String

  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([profileId, tagId])
  @@index([tagId])
}

/**
 * NextAuth adapter models
 */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
